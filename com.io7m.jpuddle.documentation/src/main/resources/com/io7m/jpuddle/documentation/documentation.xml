<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2015 Mark Raynsford <code@io7m.com> https://www.io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>${project.parent.name} ${project.version} Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package implements
          a very simple object pooling system.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Rationale</s:subsection-title>
        <s:paragraph>
          <s:term s:type="term">Object pooling</s:term> is a programming technique
          where instead of creating new objects to service requests, a small
          pool of objects is created and the objects within the pool are reused
          repeatedly to service requests instead. This was traditionally used
          by Java programs as a performance optimization in an attempt to
          reduce memory allocations and therefore reduce the amount of
          <s:term s:type="term">garbage collection</s:term> that occurs. On modern
          Java virtual machines, however, <s:term s:type="term">object pooling</s:term>
          as a means to improve performance in this manner is strongly
          contraindicated: Object allocations are extremely fast (on the order
          of a few tens of nanoseconds), <s:term s:type="term">escape analysis</s:term>
          often eliminates allocations entirely, and modern garbage collectors
          are optimized to make short-lived objects essentially free.
        </s:paragraph>
        <s:paragraph>
          With this in mind, it may not be clear why the
          <s:term s:type="package">${project.parent.name}</s:term> package
          should exist at all! The answer is that object pooling is still
          useful when the objects represent external resources that may be
          very expensive to acquire and/or the program should avoid acquiring
          too many of these resources at any given time. An example of this
          sort of use case is allocating short-lived <s:term s:type="term">framebuffer objects</s:term>
          <s:footnote>
            <s:link-external s:target="https://www.khronos.org/opengl/wiki/Framebuffer_Object">https://www.khronos.org/opengl/wiki/Framebuffer_Object</s:link-external>
          </s:footnote>
          on a GPU. Graphics memory is typically in relatively short supply
          and creating an object on the GPU is generally considered to be
          an expensive and slow process (relative to simply allocating an
          object on the CPU side). A pool of <s:term s:type="term">framebuffer objects</s:term>
          can be created that the application can reuse repeatedly without
          needing to create new objects, and the size of the pool can be
          bounded so that the application does not try to exceed the available
          GPU memory.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external s:target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external s:target="http://search.maven.org/#search%7Cga%7C1%7C${project.parent.name}">Central Repository</s:link-external>,
          so it's possible to use the <s:term s:type="package">${project.parent.name}</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.parent.artifactId}-core</artifactId>
  <version>${project.version}</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
        <s:paragraph>
          All <s:link-external s:target="https://www.io7m.com">io7m.com</s:link-external>
          packages use Semantic Versioning
          <s:footnote>
            <s:link-external s:target="http://semver.org">http://semver.org</s:link-external>
          </s:footnote>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term s:type="package">${project.parent.name}</s:term>
        package are placed under the following license:
        <s:verbatim s:type="license"><![CDATA[Copyright © 2015 Mark Raynsford <code@io7m.com> https://www.io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external s:target="apidocs">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
