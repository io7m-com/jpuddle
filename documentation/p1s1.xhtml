<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jpuddle 0.3.0 Documentation: 1.1. Orientation</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://github.com/io7m/jpuddle">io7m-jpuddle</a> 0.3.0
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">1. Package Information</td><td class="st200_navbar_up_title_cell">1. Package Information</td><td class="st200_navbar_next_title_cell">1.2. Installation</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p1.xhtml#st200_p1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p1.xhtml#st200_p1">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p1s2.xhtml#st200_p1s2">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s1" href="#st200_p1s1">1.1</a></div><div class="st200_section_title">Orientation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss1" href="#st200_p1s1ss1">1.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss1pg1" href="#st200_p1s1ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term package">io7m-jpuddle</span> package implements
          a very simple object pooling system.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss2" href="#st200_p1s1ss2">1.1.2</a></div><div class="st200_subsection_title">Rationale</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg1" href="#st200_p1s1ss2pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Object pooling</span> is a programming technique
          where instead of creating new objects to service requests, a small
          pool of objects is created and the objects within the pool are reused
          repeatedly to service requests instead. This was traditionally used
          by Java programs as a performance optimization in an attempt to
          reduce memory allocations and therefore reduce the amount of
          <span class="st200_term term">garbage collection</span> that occurs. On modern
          Java virtual machines, however, <span class="st200_term term">object pooling</span>
          as a means to improve performance in this manner is strongly
          contraindicated: Object allocations are extremely fast (on the order
          of a few tens of nanoseconds), <span class="st200_term term">escape analysis</span>
          often eliminates allocations entirely, and modern garbage collectors
          are optimized to make short-lived objects essentially free.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg2" href="#st200_p1s1ss2pg2">2</a></div><div class="st200_paragraph">
          With this in mind, it may not be clear why the
          <span class="st200_term package">io7m-jpuddle</span> package
          should exist at all! The answer is that object pooling is still
          useful when the objects represent external resources that may be
          very expensive to acquire and/or the program should avoid acquiring
          too many of these resources at any given time. An example of this
          sort of use case is allocating short-lived <span class="st200_term term">framebuffer objects</span>
          <span class="st200_footnote_reference"><a id="st200_fn_0_ref" href="#st200_fn_0">[0]</a></span>
          on a GPU. Graphics memory is typically in relatively short supply
          and creating an object on the GPU is generally considered to be
          an expensive and slow process (relative to simply allocating an
          object on the CPU side). A pool of <span class="st200_term term">framebuffer objects</span>
          can be created that the application can reuse repeatedly without
          needing to create new objects, and the size of the pool can be
          bounded so that the application does not try to exceed the available
          GPU memory.
        </div></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_0" href="#st200_fn_0_ref">0</a>]</div><div class="st200_footnote_body">
            <a class="st200_link_external" href="https://www.khronos.org/opengl/wiki/Framebuffer_Object">https://www.khronos.org/opengl/wiki/Framebuffer_Object</a>
          </div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p1.xhtml#st200_p1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p1.xhtml#st200_p1">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p1s2.xhtml#st200_p1s2">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">1. Package Information</td><td class="st200_navbar_up_title_cell">1. Package Information</td><td class="st200_navbar_next_title_cell">1.2. Installation</td></tr></table></div></div></body></html>
